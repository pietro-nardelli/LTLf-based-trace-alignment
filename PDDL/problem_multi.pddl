(define (problem problem_multi) (:domain domain_multi) (:objects t0 t1 t2 t3 t4 - trace_state s26 s27 s28 s29 - automaton_state s t i a b k l j n o e f p q u v w - activity) (:init (= (total-cost) 0) (cur_state t0) (trace t0 s t1) (trace t1 t t2) (trace t2 a t3) (trace t3 i t4) (final_state t4) (cur_state s26) (automaton s26 s s27) (automaton s27 s s29) (automaton s28 s s27) (automaton s29 s s29) (automaton s26 t s27) (automaton s27 t s29) (automaton s28 t s27) (automaton s29 t s29) (automaton s26 i s27) (automaton s27 i s29) (automaton s28 i s27) (automaton s29 i s29) (automaton s26 a s27) (automaton s27 a s29) (automaton s28 a s27) (automaton s29 a s29) (automaton s26 b s27) (automaton s27 b s29) (automaton s28 b s27) (automaton s29 b s29) (automaton s26 k s27) (automaton s27 k s29) (automaton s28 k s27) (automaton s29 k s29) (automaton s26 l s27) (automaton s27 l s29) (automaton s28 l s27) (automaton s29 l s29) (automaton s26 j s27) (automaton s27 j s29) (automaton s28 j s27) (automaton s29 j s29) (automaton s26 n s27) (automaton s27 n s29) (automaton s28 n s27) (automaton s29 n s29) (automaton s26 o s27) (automaton s27 o s29) (automaton s28 o s27) (automaton s29 o s29) (automaton s26 e s27) (automaton s27 e s29) (automaton s28 e s27) (automaton s29 e s29) (automaton s26 f s27) (automaton s27 f s29) (automaton s28 f s27) (automaton s29 f s29) (automaton s26 p s27) (automaton s27 p s29) (automaton s28 p s27) (automaton s29 p s29) (automaton s26 q s27) (automaton s27 q s29) (automaton s28 q s27) (automaton s29 q s29) (automaton s26 u s27) (automaton s27 u s29) (automaton s28 u s27) (automaton s29 u s29) (automaton s26 v s28) (automaton s27 v s29) (automaton s28 v s28) (automaton s29 v s29) (automaton s26 w s27) (automaton s27 w s27) (automaton s28 w s29) (automaton s29 w s29) (final_state s26) (final_state s28) ) (:goal (forall (?s - state) (imply (cur_state ?s) (final_state ?s)))) (:metric minimize (total-cost)))